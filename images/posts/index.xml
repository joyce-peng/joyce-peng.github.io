<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on &gt; Joyce`s Blog</title>
    <link>https://joyce-peng.github.io/posts/</link>
    <description>Recent content in Posts on &gt; Joyce`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 17 Apr 2020 21:31:39 +0800</lastBuildDate>
    
	<atom:link href="https://joyce-peng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>图像检索中的空间池化操作——R-MAC、GeM</title>
      <link>https://joyce-peng.github.io/2020/post_a004/</link>
      <pubDate>Fri, 17 Apr 2020 21:31:39 +0800</pubDate>
      
      <guid>https://joyce-peng.github.io/2020/post_a004/</guid>
      <description>R-MAC (Regional Maximum Activation of Convolutions) &amp;nbsp (1) 假设卷积网络结构中，最后一个卷积层产生的feature map大小为W * H * K。在每个feature map上以L个不同的尺度产生regions。如图所示，依次为L=1,2,3。L= 1时，把特征图上以重叠40%左右能采到的regions个数记为参数m。对于第L个尺度，采样的正方形区域个数为L*(L+m-1)个，区域大小为2*min(H,W)/(L+1)。所有尺度加起来的region个数N=L1+L2+L3。
(2)以产生的第一个region R1为例，其中的每一层d（1&amp;lt;=d&amp;lt;=K）均会产生一个大小位置与R1相同的regions。从d层的每个region中找到其最大的激活值 f（R1,d），以该最大值代表该层的region。所以R1的feature vector可以表示为 f（R1）=[ f（R1,1），&amp;hellip;，f（R1,d），&amp;hellip;，f（R1,K）]。对该feature vector做L2归一化、PCA白化、L2归一化后得到一个1×k的向量。有N个region，所以会有N个1×k的向量。
(3) 接着把产生的N个区域向量都累加起来并再做一次L2归一化，最终产生的 f 就是R-MAC特征向量。
优点：
(1)与全连接层提取的特征相比，卷积层提取的特征更多地保留了输入图像的局部特征和目标空间信息，并且卷积层特征对于图像变换更具鲁棒性。
(2) R-MAC构建了紧凑的特征向量，可以对多个图像区域进行编码，提高了图像检索的性能。
GeM (Generalized Mean Pooling) 和R-MAC一样都是在feature map上进行的，只是R-MAC是取区域内最大的值，而GeM是取整个feature map的带指数的平均，也就是整张图的每个像素的p次方求和再开p次方。指数p＞1时会增大输入特征图的对比度，专注于输入特征图突出的部分。GeM的embedding公式如下：</description>
    </item>
    
    <item>
      <title>目标检测概述及对R-CNN的理解</title>
      <link>https://joyce-peng.github.io/2020/post_a003/</link>
      <pubDate>Wed, 25 Mar 2020 23:53:26 +0800</pubDate>
      
      <guid>https://joyce-peng.github.io/2020/post_a003/</guid>
      <description>目标检测的任务 核心：既要把图中多个物体识别出来（识别），又要用方框框出它们的位置（定位）。
  识别（classification）： 输入：图片
输出：物体的类别
评估方法：准确率mAP
  定位（localization）： 输入：图片
输出：方框在图片中的位置（x,y,w,h）
评估方法：候选框与原标记框的交叠率IOU
  &amp;nbsp 单个物体的目标识别怎么做（Classification + Localization） 识别任务：卷积神经网络CNN（为何用CNN，请看注释[1]） 定位任务：分以下两种做法 1）看做回归问题，需要预测出（x,y,w,h）四个参数的值，从而得出方框的位置。 对应的方案：
步骤1：搭一个卷积神经网络CNN。
步骤2：在上述神经网络的尾部作出改进，加了两个头，分别是“分类头”和“回归头”。
步骤3：预测阶段把2个头部拼上，完成不同的功能。
    &amp;nbsp 2）取图像窗口 步骤1：取不同的大小的“框”
步骤2：让框出现在不同的位置，得出这个框的判定得分
步骤3：取得分最高的那个框
举例：
  左上角的黑框得分0.5，右上角的黑框得分0.75，左下角的黑框得分0.6，右下角的黑框得分0.8， 根据得分的高低，我们选择了右下角的黑框作为目标位置的预测。
注：有的时候也会选择得分最高的两个框，然后取两框的交集作为最终的位置预测。
小结：对一张图片，用各种大小的框（遍历整张图片）将图片截取出来，输入到CNN，然后CNN会输出这个框的得分（classification）以及这个框图片对应的x,y,h,w（regression）。如下图：
  &amp;nbsp 目标检测（Object Detection） 相对于单个物体的识别，目标检测的难度更高，因为它需要对多个物体进行识别和定位，你需要找很多位置， 给很多个不同大小的框，还要对框内的图像分类。这时原来的方法就不太管用了，因为：
1）基于滑动窗口的区域选择策略没有针对性，时间复杂度高，窗口冗余
2）手工设计的特征对于多样性的变化没有很好的鲁棒性
R-CNN（Regions with CNN features）   &amp;nbsp 为了解决这个问题，R-CNN横空出世（背景在注释[2]）：预先找出图中目标可能出现的位置，即候选区域（Region Proposal）。利用图像中的纹理、边缘、颜色等信息，可以保证在选取较少窗口(几千甚至几百）的情况下保持较高的召回率。所以，问题就转变成找出可能含有物体的区域/框（也就是候选区域/框，比如选2000个候选框），这些框之间是可以互相重叠互相包含的，这样我们就可以避免暴力枚举所有框了。有了候选区域，剩下的工作实际就是对候选区域进行图像分类的工作（特征提取+分类）。
那么如何得到候选区域呢？R-CNN采用了选择性搜索算法（Selective Search），它可以对具有相似颜色、纹理、面积、形状的图像区域进行合并分组计算，从而找到可能存在物体的区域，这些区域就是候选区域。最后再由这些候选区域生成候选框。该算法流程如下：
  解读： step0：生成区域集R，方法具体参见论文Efficient Graph-Based Image Segmentation</description>
    </item>
    
    <item>
      <title>Hugo内嵌html失败</title>
      <link>https://joyce-peng.github.io/2020/post_a002/</link>
      <pubDate>Sun, 16 Feb 2020 01:04:01 +0800</pubDate>
      
      <guid>https://joyce-peng.github.io/2020/post_a002/</guid>
      <description>在md文件中插入图片时发现hugo好像没办法正常显示markdown中内嵌的html，后来谷歌到了解决办法，记录一下。
在2019年11月的hugo更新中，使用了Goldmark作为默认库，想要内嵌html，就得在config.toml中加入下面代码。
[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true </description>
    </item>
    
    <item>
      <title>Hugo LeaveIt主题优化 | 如何删除/替换/添加图标</title>
      <link>https://joyce-peng.github.io/2020/post_a001/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joyce-peng.github.io/2020/post_a001/</guid>
      <description>本站目前所用的主题是LeaveIt，主题的作者喜欢简单的风格，所以在布局上采用了大量的留白。Hugo主题看了不少，感觉还是这种简洁、干净、优雅的主题比较打动我。
删除图标 下载好的主题有些地方与自己实际想要的效果还是有点差距的，比如首页那一长排的图标，很多用不上。如果你想删除其中的一些，可以直接在config.toml中，把params.social下不用的图标注释掉，这样首页就不会再显示这些图标了。
 &amp;nbsp   注释前   注释后  替换图标 如果想把首页的图标替换成别的，可以在阿里巴巴矢量图库找到自己喜欢的图标，将其添加到库，然后下载代码。
&amp;nbsp &amp;nbsp  &amp;nbsp  下载的文件解压后有不少东西，但是需要用到的只有下面几个。
第一步 先修改下面几个文件的名称。
第二步 打开hugo项目的主题目录，找到font文件夹（..\myBlog\themes\LeaveIt\assets\font），font中也有一个iconfont.css，打开它，把刚刚下载文件中的iconfont.css的@font-face粘贴到font中的iconfont.css，注意更改名称，否则会有冲突。然后把下载文件的iconfont.css中新增图标的信息也复制到font中的iconfont.css。
第三步 把这四个文件复制到font文件夹。
第四步 打开..\myBlog\themes\LeaveIt\layouts\partials\social.html，按需增添链接。
第五步 修改config.toml中的params.social。
效果 添加图标 如果想在页面的某个地方添加图标，比如LeaveIt主题切换黑/白风格的按钮是在左上方的爱心，我想把这个功能放在目录右边的位置，并改成太阳的图标，看看如何来操作。
第一步 按替换图标的方法，把在阿里巴巴矢量库中下载的太阳图标添加进font文件。
第二步 打开..\myBlog\themes\LeaveIt\layouts\partials\ header.html，改动以下地方。 效果 改动前 改动后 </description>
    </item>
    
  </channel>
</rss>